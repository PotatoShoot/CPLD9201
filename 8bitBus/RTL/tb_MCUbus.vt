`timescale 1ns / 1ps

module tb_MCUbus;

// 信号定义
reg clk;
//reg rst_n;
tri [7:0] DB; // 使用 tri 类型来模拟双向数据总线
reg ALE;
reg WR;
reg RD;

reg [7:0] expected_data [0:4]; // 用于存储期望读取的数据
integer i;

// 被测试模块实例化
MCUbus uut (
    .clk(clk),
    //.rst_n(rst_n),
    .DB(DB), // DB 接口作为 inout
    .ALE(ALE),
    .WR(WR),
    .RD(RD)
);

// 时钟生成
initial begin
    clk = 0;
    forever #5 clk = ~clk; // 20ns 时钟周期
end

// 测试过程
initial begin
    // 初始化信号
    //rst_n = 0;
    ALE = 1;
    WR = 1;
    RD = 1;

    // 复位模块
    #20;
    //rst_n = 1; // 解除复位
    #20;

    // 写入数据到地址0x50 - 0x54
    expected_data[0] = 8'hAB; // 地址0x50写入
    expected_data[1] = 8'hCD; // 地址0x51写入
    expected_data[2] = 8'hEF; // 地址0x52写入
    expected_data[3] = 8'h12; // 地址0x53写入
    expected_data[4] = 8'h34; // 地址0x54写入

    for (i = 0; i < 5; i = i + 1) begin
        // 设置ALE为低，锁存地址
        ALE = 0; // 开始锁存
        force DB = 8'h50 + i; // 地址0x50 + i
        #20;
        ALE = 1; // 锁存地址结束
        release DB;
        #20;

        // 写入数据
        WR = 0; // 启动写入
        force DB = expected_data[i]; // 写入数据
        #20;
        WR = 1; // 写入结束
        release DB;
        #20;
    end

    // 读取数据
    for (i = 0; i < 5; i = i + 1) begin
        // 设置ALE为低，锁存地址
        ALE = 0; // 开始锁存
        force DB = 8'h50 + i; // 地址0x50 + i
        #20;
        release DB;
        ALE = 1; // 锁存地址结束
        #20;

        RD = 0; // 启动读取
        #20;
        RD = 1; // 读取结束
        #20;

        // 读取后的验证
        #20;
        $display("地址 0x%02h 期望值: 0x%02h", 8'h50 + i, expected_data[i]);
    end

    // 模拟结束
    $stop;
end

endmodule
